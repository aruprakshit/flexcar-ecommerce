<!DOCTYPE html>
<html>
  <head>
    <title><%= content_for(:title) || "Flexcar E-commerce" %></title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="mobile-web-app-capable" content="yes">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= yield :head %>

    <%# Enable PWA manifest for installable apps (make sure to enable in config/routes.rb too!) %>
    <%#= tag.link rel: "manifest", href: pwa_manifest_path(format: :json) %>

    <link rel="icon" href="/icon.png" type="image/png">
    <link rel="icon" href="/icon.svg" type="image/svg+xml">
    <link rel="apple-touch-icon" href="/icon.png">

    <%# Includes all stylesheet files in app/assets/stylesheets %>
    <%= stylesheet_link_tag :app, "data-turbo-track": "reload" %>
    <%= javascript_importmap_tags %>
  </head>

  <body>
    <!-- Navigation Header -->
    <nav class="navbar is-primary" role="navigation" aria-label="main navigation">
      <div class="container">
        <div class="navbar-brand">
          <%= link_to "Flexcar", root_path, class: "navbar-item has-text-weight-bold is-size-4" %>
          
          <a role="button" class="navbar-burger" aria-label="menu" aria-expanded="false" data-target="navbarMenu">
            <span aria-hidden="true"></span>
            <span aria-hidden="true"></span>
            <span aria-hidden="true"></span>
          </a>
        </div>
        
        <div id="navbarMenu" class="navbar-menu">
          <div class="navbar-start">
            <%= link_to "Products", items_path, class: "navbar-item" %>
            <%= link_to "Categories", categories_path, class: "navbar-item" %>
            <%= link_to "Brands", brands_path, class: "navbar-item" %>
          </div>
          
          <div class="navbar-end">
            <div class="navbar-item">
              <%= link_to cart_path, class: "button is-primary is-inverted" do %>
                <span class="icon">
                  <i class="fas fa-shopping-cart"></i>
                </span>
                <span>Cart</span>
                <% cart_count = current_cart.cart_items.sum(:quantity).to_i %>
                <% if cart_count > 0 %>
                  <span class="tag is-danger is-small ml-2" id="cart-badge">
                    <%= cart_count %>
                  </span>
                <% end %>
              <% end %>
            </div>
          </div>
        </div>
      </div>
    </nav>

    <!-- Flash Messages -->
    <% flash.each do |type, message| %>
      <div class="notification is-<%= type == 'notice' ? 'success' : 'danger' %> is-light">
        <button class="delete" onclick="this.parentElement.style.display='none'"></button>
        <%= message %>
      </div>
    <% end %>

    <!-- Main Content -->
    <main class="section">
      <div class="container">
        <%= yield %>
      </div>
    </main>

    <!-- Footer -->
    <footer class="footer has-background-dark has-text-light">
      <div class="container">
        <div class="columns">
          <div class="column is-half">
            <h5 class="title is-5 has-text-light">Flexcar E-commerce</h5>
            <p>Your trusted online shopping destination</p>
          </div>
          <div class="column is-half has-text-right">
            <p>&copy; 2025 Flexcar. All rights reserved.</p>
          </div>
        </div>
      </div>
    </footer>

    <!-- Equal Height Cards JavaScript -->
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        function equalizeCardHeights() {
          const productGrids = document.querySelectorAll('.product-grid');
          
          productGrids.forEach(function(grid) {
            const rows = [];
            const cards = grid.querySelectorAll('.card');
            
            // Group cards by row (assuming 4 cards per row on desktop)
            let currentRow = [];
            cards.forEach(function(card, index) {
              currentRow.push(card);
              
              // Check if we've completed a row (4 cards) or reached the end
              if (currentRow.length === 4 || index === cards.length - 1) {
                rows.push(currentRow);
                currentRow = [];
              }
            });
            
            // Equalize heights within each row
            rows.forEach(function(row) {
              let maxHeight = 0;
              
              // Find the tallest card in the row
              row.forEach(function(card) {
                card.style.height = 'auto'; // Reset height
                const cardHeight = card.offsetHeight;
                if (cardHeight > maxHeight) {
                  maxHeight = cardHeight;
                }
              });
              
              // Set all cards in the row to the same height
              row.forEach(function(card) {
                card.style.height = maxHeight + 'px';
              });
            });
          });
        }
        
        // Run on page load
        equalizeCardHeights();
        
        // Run on window resize
        window.addEventListener('resize', function() {
          setTimeout(equalizeCardHeights, 100);
        });
      });
    </script>
  </body>
</html>
